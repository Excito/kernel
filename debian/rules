#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

UPLOADER  := $(shell dpkg-parsechangelog | sed -ne 's,^Maintainer: .[^<]*<\([^>]*\)>,\1,p')


DEB_VERSION := $(shell dpkg-parsechangelog | egrep '^Version:' | cut -f 2 -d ' ')
DEB_NOEPOCH_VERSION := $(shell echo $(DEB_VERSION) | cut -d: -f2-)
DEB_UPSTREAM_VERSION := $(shell echo $(DEB_NOEPOCH_VERSION) | sed 's/-[^-]*$$//')
DEB_REVISION :=  $(shell echo $(DEB_NOEPOCH_VERSION) | cut -d- -f2-)

DEB_BUILD_ARCH := $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_HOST_ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_HOST_ARCH_CPU := $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU)
DEB_HOST_GNU_TYPE := $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
BUILD_DIR=debian/build
SOURCE_DIR=$(BUILD_DIR)/source


export DEB_HOST_ARCH DEB_HOST_GNU_TYPE DEB_BUILD_ARCH

setup_env := env -u ABINAME -u ARCH -u FEATURESET -u FLAVOUR -u VERSION -u LOCALVERSION
setup_env += DISTRIBUTION_OFFICIAL_BUILD=1 DISTRIBUTION_UPLOADER=$(UPLOADER) DISTRIBUTION_VERSION="$(DEB_VERSION)"

MAKE_CLEAN = $(setup_env) $(MAKE)

ifeq ($(DEB_HOST_ARCH),armel)
	PACKAGE=bubba3-kernel
	CONFIG=bubba3_defconfig
else ifeq ($(DEB_HOST_ARCH),powerpc)
	PACKAGE=bubba-kernel
	CONFIG=bubbatwo_defconfig
endif

PACKAGE_DIR=debian/$(PACKAGE)
%:
	+dh $@

define REAL_VERSION
$(shell cat $(DIR)/include/config/kernel.release)
endef

override_dh_auto_configure: DIR=$(BUILD_DIR)/build-$(DEB_HOST_GNU_TYPE)
override_dh_auto_configure:
	rm -rf '$(SOURCE_DIR)'
	mkdir -p '$(SOURCE_DIR)'
	cp -al $(filter-out debian, $(wildcard * .[^.]*)) '$(SOURCE_DIR)'
	touch '$(SOURCE_DIR)/.scmversion'
	rm -rf '$(DIR)'
	mkdir -p '$(DIR)'
	echo '-$(DEB_REVISION)' > '$(DIR)/localversion'
	echo 'override ARCH = $(DEB_HOST_ARCH_CPU)' >> '$(DIR)/.kernelvariables'
ifneq (,$(findstring ccache,$(DEB_BUILD_OPTIONS)))
	echo 'CCACHE = ccache' >> '$(DIR)/.kernelvariables'
	echo 'CC =ccache $$(CROSS_COMPILE)gcc' >> '$(DIR)/.kernelvariables'
endif
ifneq ($(DEB_BUILD_ARCH),$(DEB_HOST_ARCH))
	echo 'override CROSS_COMPILE = $(DEB_HOST_GNU_TYPE)-' >> '$(DIR)/.kernelvariables'
endif
	+$(MAKE_CLEAN) -C '$(SOURCE_DIR)' O='$(CURDIR)/$(DIR)' $(CONFIG)
	+$(MAKE_CLEAN) -C '$(SOURCE_DIR)' O='$(CURDIR)/$(DIR)' prepare

override_dh_auto_install:  DIR=$(BUILD_DIR)/build-$(DEB_HOST_GNU_TYPE)
override_dh_auto_install:
	+$(MAKE_CLEAN) -C $(DIR) INSTALL_MOD_PATH='$(CURDIR)/$(PACKAGE_DIR)' INSTALL_MOD_STRIP=1 modules_install
	cp '$(DIR)'/arch/$(DEB_HOST_ARCH_CPU)/boot/uImage debian/$(PACKAGE)/boot
	cp '$(DIR)'/.config $(PACKAGE_DIR)/boot/config-$(call REAL_VERSION)
	cp '$(DIR)'/System.map $(PACKAGE_DIR)/boot/System.map-$(call REAL_VERSION)
	find $(PACKAGE_DIR)/lib/modules/$(call REAL_VERSION)/ -mindepth 1 -maxdepth 1 \! -name kernel \! -name modules.order -exec rm {} \+
	rm $(PACKAGE_DIR)/lib/firmware -rf	

override_dh_auto_build: DIR=$(BUILD_DIR)/build-$(DEB_HOST_GNU_TYPE)
override_dh_auto_build:
	+$(MAKE_CLEAN) -C '$(SOURCE_DIR)' O='$(CURDIR)/$(DIR)'
	+$(MAKE_CLEAN) -C '$(SOURCE_DIR)' O='$(CURDIR)/$(DIR)' uImage

override_dh_clean:
	rm -rf '$(BUILD_DIR)';

override_dh_auto_clean:
	rm -rf '$(BUILD_DIR)';

